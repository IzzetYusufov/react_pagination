{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","components/Select/Select.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","_ref","currentPage","qntyOfCells","total","onPageChange","leftArrowDisable","rightArrowDisable","length","handleCellClick","event","cellValue","currentTarget","innerText","_jsxs","_Fragment","children","className","_jsx","cn","disabled","href","onClick","map","item","active","concat","undefined","Select","selectOptions","selectValue","setOptionPage","resetPage","id","value","onChange","target","option","htmlFor","items","App","_useState","useState","_useState2","_slicedToArray","setPage","_useState3","_useState4","perPage","setPerPage","_useState5","_useState6","renderItems","setRenderItems","_useState7","_useState8","setQntyOfCells","useEffect","perPageNum","resultItems","forEach","_item","i","slice","itemsPerPage","totalItems","itemsFrom","itemsTo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20fde029.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import cn from 'classnames';\n\ntype Props = {\n  total: Array<string>[],\n  qntyOfCells: number[]\n  currentPage: number,\n  onPageChange: (page: number) => void,\n};\n\nexport const Pagination = ({\n  currentPage,\n  qntyOfCells,\n  total,\n  onPageChange,\n}: Props) => {\n  const leftArrowDisable = currentPage === 1;\n  const rightArrowDisable = currentPage === total.length;\n\n  const handleLeftArrow = () => {\n    return currentPage > 1\n      ? onPageChange(currentPage - 1)\n      : null;\n  };\n\n  const handleRightArrow = () => {\n    return currentPage < total.length\n      ? onPageChange(currentPage + 1)\n      : null;\n  };\n\n  const handleCellClick = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    const cellValue = +event.currentTarget.innerText;\n\n    return cellValue !== currentPage\n      ? onPageChange(cellValue)\n      : null;\n  };\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li\n          className={cn(\n            'page-item',\n            { disabled: leftArrowDisable },\n          )}\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={leftArrowDisable}\n            onClick={handleLeftArrow}\n          >\n            «\n          </a>\n        </li>\n        {qntyOfCells.map(item => (\n          <li\n            key={item}\n            className={cn(\n              'page-item',\n              { active: item === currentPage },\n            )}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href={`#${item}`}\n              onClick={handleCellClick}\n            >\n              {item}\n            </a>\n          </li>\n        ))}\n        <li\n          className={cn(\n            'page-item',\n            { disabled: rightArrowDisable },\n          )}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={rightArrowDisable}\n            onClick={handleRightArrow}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n      {total[currentPage - 1] !== undefined && (\n        <ul>\n          {total[currentPage - 1].map(item => (\n            <li\n              data-cy=\"item\"\n              key={item}\n            >\n              {item}\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n","type Props = {\n  selectOptions: number[],\n  selectValue: number,\n  setOptionPage: (value: number) => void,\n  resetPage: (page: number) => void,\n};\n\nexport const Select: React.FC<Props> = ({\n  selectOptions,\n  selectValue,\n  setOptionPage,\n  resetPage,\n}) => (\n  <div className=\"form-group row\">\n    <div className=\"col-3 col-sm-2 col-xl-1\">\n      <select\n        data-cy=\"perPageSelector\"\n        id=\"perPageSelector\"\n        className=\"form-control\"\n        value={selectValue}\n        onChange={(event) => {\n          setOptionPage(+event.target.value);\n          resetPage(1);\n        }}\n      >\n        {selectOptions.map((option: number) => (\n          <option\n            value={option}\n            key={option}\n          >\n            {option}\n          </option>\n        ))}\n      </select>\n    </div>\n\n    <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n      items per page\n    </label>\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\nimport { Select } from './components/Select';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst items = getNumbers(1, 42).map(n => `Item ${n}`);\nconst selectOptions = [3, 5, 10, 20];\n\nfunction itemsPerPage(perPageNum: number) {\n  const resultItems: Array<string>[] = [];\n\n  items.forEach((_item, i) => {\n    return i % perPageNum === 0\n      ? resultItems.push(items.slice(i, (i + perPageNum)))\n      : null;\n  });\n\n  return resultItems;\n}\n\nexport const App: React.FC = () => {\n  const [currentPage, setPage] = useState<number>(1);\n  const [perPage, setPerPage] = useState<number>(5);\n  const [renderItems, setRenderItems] = useState<string[][]>([['']]);\n  const [qntyOfCells, setQntyOfCells] = useState<number[]>([0]);\n\n  useEffect(() => {\n    setRenderItems(() => itemsPerPage(perPage));\n  }, [items, perPage]);\n\n  useEffect(() => {\n    setQntyOfCells(() => getNumbers(1, renderItems.length));\n  }, [renderItems, perPage]);\n\n  const totalItems = items.length;\n\n  const itemsFrom = currentPage * perPage - perPage + 1;\n  const itemsTo = currentPage * perPage > totalItems\n    ? totalItems\n    : currentPage * perPage;\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${itemsFrom} - ${itemsTo} of ${totalItems})`}\n      </p>\n\n      <Select\n        selectOptions={selectOptions}\n        selectValue={perPage}\n        setOptionPage={setPerPage}\n        resetPage={setPage}\n      />\n\n      <Pagination\n        total={renderItems}\n        currentPage={currentPage}\n        onPageChange={setPage}\n        qntyOfCells={qntyOfCells}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}